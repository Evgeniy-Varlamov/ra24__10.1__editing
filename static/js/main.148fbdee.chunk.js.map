{"version":3,"sources":["actions/actionTypes.js","components/ServiceAdd.js","actions/actionCreators.js","components/ServiceList.js","App.js","serviceWorker.js","reducers/serviceList.js","reducers/serviceAdd.js","store/index.js","index.js"],"names":["ADD_SERVICE","REMOVE_SERVICE","CHANGE_SERVICE_FIELD","EDIT_SERVICE","UPDATE_SERVICE","CANCEL_SERVICE","ServiceAdd","item","useSelector","state","serviceAdd","dispatch","useDispatch","handleChange","evt","target","name","value","type","payload","changeServiceField","onSubmit","id","price","preventDefault","addService","onReset","onChange","ServiceList","items","serviceList","handleRemove","removeService","handleEdit","editService","map","o","key","onClick","App","Boolean","window","location","hostname","match","initialState","nanoid","reducer","combineReducers","action","Number","filter","service","console","log","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.148fbdee.chunk.js","sourcesContent":["export const ADD_SERVICE = 'ADD_SERVICE';\nexport const REMOVE_SERVICE = 'REMOVE_SERVICE';\nexport const CHANGE_SERVICE_FIELD = 'CHANGE_SERVICE_FIELD';\nexport const EDIT_SERVICE = 'EDIT_SERVICE';\nexport const UPDATE_SERVICE = 'UPDATE_SERVICE';\nexport const CANCEL_SERVICE = 'CANCEL_SERVICE';\n","import React from 'react';\nimport {useSelector, useDispatch} from 'react-redux';\nimport {changeServiceField, addService, updateService, editServiceCancel} from '../actions/actionCreators';\n\nfunction ServiceAdd() {\n  const item = useSelector(state => state.serviceAdd);\n  const dispatch = useDispatch();\n\n  const handleChange = evt => {\n    const {name, value} = evt.target;\n    dispatch(changeServiceField(name, value));\n  }\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    if (item.id) {\n      dispatch(updateService(item.id, item.name, item.price))\n    } else {\n      dispatch(addService(item.name, item.price));\n    }\n  }\n\n  const handleReset = evt => {\n    dispatch(editServiceCancel());\n  }\n\n  return (\n    <form onSubmit={handleSubmit} onReset={handleReset}>\n      <input name='name' onChange={handleChange} value={item.name} />\n      <input name='price' onChange={handleChange} value={item.price} />\n      <button type='submit'>Save</button>\n      {item.id && <button type='reset'>Cancel</button>}\n    </form>\n  );\n}\n\nexport default ServiceAdd;\n","import { ADD_SERVICE, REMOVE_SERVICE, CHANGE_SERVICE_FIELD, EDIT_SERVICE, UPDATE_SERVICE, CANCEL_SERVICE } from './actionTypes';\n\nexport function addService(name, price) {\n  return {type: ADD_SERVICE, payload: {name, price}};\n}\n\nexport function removeService(id) {\n  return {type: REMOVE_SERVICE, payload: {id}};\n}\n\nexport function changeServiceField(name, value) {\n  return {type: CHANGE_SERVICE_FIELD, payload: {name, value}}\n}\n\nexport function editService(id, name, price) {\n  return {type: EDIT_SERVICE, payload: {id, name, price}};\n}\n\nexport function updateService(id, name, price) {\n  return {type: UPDATE_SERVICE, payload: {id, name, price}};\n}\n\nexport function editServiceCancel() {\n  return {type: CANCEL_SERVICE};\n}","import React from 'react'\nimport {useSelector, useDispatch} from 'react-redux';\nimport {removeService, editService} from '../actions/actionCreators';\n\nfunction ServiceList() {\n  const items = useSelector(state => state.serviceList);\n  const dispatch = useDispatch();\n\n  const handleRemove = id => {\n    dispatch(removeService(id));\n  }\n\n  const handleEdit = (id, name, price) => {\n    dispatch(editService(id, name, price));\n  }\n\n  return (\n    <ul>\n      {items.map(o => (\n        <li key={o.id}>\n          {o.name} {o.price}\n          <button onClick={() => handleEdit(o.id, o.name, o.price)}>&#128393;</button>\n          <button onClick={() => handleRemove(o.id)}>✕</button>\n        </li>\n      ))}\n    </ul>\n  )\n}\n\nexport default ServiceList\n","import React from 'react';\nimport ServiceAdd from './components/ServiceAdd';\nimport ServiceList from './components/ServiceList';\n\nfunction App() {\n  return (\n    <>\n      <ServiceAdd />\n      <ServiceList />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import nanoid from 'nanoid';\nimport {ADD_SERVICE, REMOVE_SERVICE, UPDATE_SERVICE} from '../actions/actionTypes'\n\nconst initialState = [\n  {id: nanoid(), name: 'Замена стекла', price: 21000},\n  {id: nanoid(), name: 'Замена дисплея', price: 25000},\n];\n\nexport default function serviceListReducer(state = initialState, action) {\n  switch (action.type) {\n    case ADD_SERVICE: {\n      const {name, price} = action.payload;\n      return [...state, {id: nanoid(), name, price: Number(price)}];\n    } case REMOVE_SERVICE: {\n      const {id} = action.payload;\n      return state.filter(service => service.id !== id);\n    } case UPDATE_SERVICE: {\n      const {id, name, price} = action.payload;\n      return state.map((service) => {\n        if (service.id === id) {\n          return {id, name, price}\n        }\n        return service;\n      });\n    } default:\n      return state;\n  }\n}\n","import {CHANGE_SERVICE_FIELD, ADD_SERVICE, UPDATE_SERVICE, EDIT_SERVICE, CANCEL_SERVICE} from '../actions/actionTypes'\n\nconst initialState = {\n  name: '',\n  price: '',\n};\n\nexport default function serviceAddReducer(state = initialState, action) {\n  console.log(action.type);\n  switch (action.type) {\n    case CHANGE_SERVICE_FIELD: {\n      const {name, value} = action.payload;\n      return {...state, [name]: value};\n    } case ADD_SERVICE: {\n      return initialState;\n    } case UPDATE_SERVICE: {\n        return initialState;\n    } case EDIT_SERVICE: {\n      const {id, name, price} = action.payload;\n      return {id, name, price};\n    } case CANCEL_SERVICE: {\n      return initialState;\n    } default:\n      return state;\n  }\n}\n","import { createStore, combineReducers } from \"redux\";\nimport serviceListReducer from '../reducers/serviceList';\nimport serviceAddReducer from '../reducers/serviceAdd';\n\nconst reducer = combineReducers({\n  serviceList: serviceListReducer,\n  serviceAdd: serviceAddReducer,\n});\n\nconst store = createStore(\n  reducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\n);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\nimport {Provider} from 'react-redux';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}